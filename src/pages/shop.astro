---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
---

<!DOCTYPE html>
<html lang="en">
<head>
    <BaseHead title="Shop" description={SITE_DESCRIPTION} />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #121212;
            color: #E0E0E0;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }
        main {
            flex-grow: 1;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            padding: 2rem;
        }
        .container {
            max-width: 1200px;
            width: 100%;
        }
        .product-card {
            background-color: #1E1E1E;
            border-radius: 12px;
            padding: 1.5rem;
            transition: transform 0.2s, box-shadow 0.2s;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }
        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }
        .product-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 8px;
            margin-bottom: 1rem;
        }
        .cart {
            position: fixed;
            top: 1rem;
            right: 1rem;
            background-color: #1E1E1E;
            border-radius: 12px;
            padding: 1rem;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            z-index: 10;
            width: 350px;
            max-height: calc(100vh - 2rem);
            overflow-y: auto;
            transform: translateX(120%);
            transition: transform 0.3s ease-in-out;
        }
        .cart.open {
            transform: translateX(0);
        }
        .cart-toggle-button {
            position: fixed;
            top: 1rem;
            right: 1rem;
            width: 60px;
            height: 60px;
            background-color: #2F2F2F;
            color: #fff;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 20;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
            transition: background-color 0.2s ease-in-out, transform 0.3s ease-in-out;
        }
        .cart.open + .cart-toggle-button {
            transform: translateX(-360px);
        }
        .cart-toggle-button:hover {
            background-color: #404040;
        }
        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid #333;
        }
        .cart-item:last-child {
            border-bottom: none;
        }
        .quantity-control button {
            background-color: #333;
            color: #fff;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
        }
        .empty-cart-message {
            text-align: center;
            font-style: italic;
            color: #888;
        }
        .cart-total-container {
            border-top: 2px solid #555;
            padding-top: 1rem;
            margin-top: 1rem;
        }
        .checkout-button {
            width: 100%;
            padding: 1rem;
            background-color: #4CAF50;
            color: white;
            border-radius: 8px;
            font-weight: bold;
            text-align: center;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .checkout-button:hover {
            background-color: #45a049;
        }
        .notification-bar {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #333;
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s, visibility 0.3s;
            z-index: 50;
        }
        .notification-bar.visible {
            opacity: 1;
            visibility: visible;
        }
    </style>
</head>
<body>
    <Header />
    <main>
        <div class="container p-8">
            <h1 class="text-4xl font-bold mb-8 text-center text-white">Stephen Mack Shop</h1>

            <div id="products-container" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
                </div>
        </div>

        <button id="cart-toggle-button" class="cart-toggle-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-shopping-cart">
                <circle cx="8" cy="21" r="1" /><circle cx="19" cy="21" r="1" />
                <path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12" />
            </svg>
        </button>

        <div id="cart-sidebar" class="cart">
            <h2 class="text-2xl font-bold mb-4 text-white">Your Cart</h2>
            <div id="cart-items" class="mb-4">
                </div>
            <div id="cart-summary" class="cart-total-container">
                <div class="flex justify-between font-bold text-lg mb-2">
                    <span>Total:</span>
                    <span id="cart-total">$0.00</span>
                </div>
                <button id="checkout-button" class="checkout-button">Checkout</button>
            </div>
        </div>

        <div id="notification-bar" class="notification-bar"></div>
    </main>
    <Footer />
   <script>
    // Sample product data, hardcoded
    const products = [
        { id: "1", name: "Training Jersey", price: 59.99, image: "https://placehold.co/400x300/1e1e1e/d1d5db?text=Jersey" },
        { id: "2", name: "Team Scarf", price: 24.99, image: "https://placehold.co/400x300/1e1e1e/d1d5db?text=Scarf" },
        { id: "3", name: "Signed Football", price: 199.99, image: "https://placehold.co/400x300/1e1e1e/d1d5db?text=Football" },
        { id: "4", name: "Supporter Hat", price: 34.99, image: "https://placehold.co/400x300/1e1e1e/d1d5db?text=Hat" },
        { id: "5", name: "Team Poster", price: 19.99, image: "https://placehold.co/400x300/1e1e1e/d1d5db?text=Poster" },
        { id: "6", name: "Mug", price: 14.99, image: "https://placehold.co/400x300/1e1e1e/d1d5db?text=Mug" },
    ];

    // DOM elements
    const productsContainer = document.getElementById('products-container');
    const cartItemsContainer = document.getElementById('cart-items');
    const cartTotalElement = document.getElementById('cart-total');
    const cartSidebar = document.getElementById('cart-sidebar');
    const cartToggleButton = document.getElementById('cart-toggle-button');
    const checkoutButton = document.getElementById('checkout-button');
    const notificationBar = document.getElementById('notification-bar');

    let cart = {};

    // Function to show a temporary notification
    function showNotification(message) {
        notificationBar.textContent = message;
        notificationBar.classList.add('visible');
        setTimeout(() => {
            notificationBar.classList.remove('visible');
        }, 3000);
    }

    // Function to render products on the page
    function renderProducts() {
        productsContainer.innerHTML = products.map(product => `
            <div class="product-card">
                <div>
                    <img src="${product.image}" alt="${product.name}" class="product-image">
                    <h3 class="text-xl font-semibold text-white mb-2">${product.name}</h3>
                    <p class="text-gray-400 mb-4">$${product.price.toFixed(2)}</p>
                </div>
                <button class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-full mt-4 w-full add-to-cart-btn" data-id="${product.id}">Add to Cart</button>
            </div>
        `).join('');
    }

    // Function to render cart items and total
    function renderCart() {
        const productMap = products.reduce((map, p) => { map[p.id] = p; return map; }, {});
        let cartItemsHtml = '';
        let total = 0;

        if (Object.keys(cart).length === 0) {
            cartItemsHtml = '<p class="empty-cart-message">Your cart is empty.</p>';
            checkoutButton.style.display = 'none';
        } else {
            Object.entries(cart).forEach(([id, quantity]) => {
                const product = productMap[id];
                if (product) {
                    const subtotal = product.price * quantity;
                    total += subtotal;
                    cartItemsHtml += `
                        <div class="cart-item">
                            <div class="flex-1 pr-4">
                                <p class="font-medium">${product.name}</p>
                                <p class="text-sm text-gray-400">$${product.price.toFixed(2)}</p>
                            </div>
                            <div class="flex items-center space-x-2">
                                <button class="quantity-control text-lg" data-id="${id}" data-action="decrement">-</button>
                                <span class="font-bold">${quantity}</span>
                                <button class="quantity-control text-lg" data-id="${id}" data-action="increment">+</button>
                            </div>
                        </div>
                    `;
                }
            });
            checkoutButton.style.display = 'block';
        }

        cartItemsContainer.innerHTML = cartItemsHtml;
        cartTotalElement.textContent = `$${total.toFixed(2)}`;
    }

    // --- Main logic and event listeners ---
    // Make the event listener function ASYNC to use await with fetch
    productsContainer.addEventListener('click', async (e) => { 
        if (e.target.classList.contains('add-to-cart-btn')) {
            const productId = e.target.dataset.id;
            const quantity = 1;

            try {
                // 🛑 NEW: Call the Cloudflare Worker API endpoint
                const response = await fetch('/api/v1/add-to-cart', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId: productId, quantity: quantity })
                });

                if (response.status === 429) {
                    // Cloudflare Rate Limiting has blocked the request
                    showNotification("🚨 Rate limit exceeded. Please wait a moment before adding more items.");
                    return; // Stop execution
                }

                if (!response.ok) {
                    // Handle non-rate-limit errors from the worker (e.g., out of stock, 500 errors)
                    showNotification(`❌ Failed to add item. Status: ${response.status}`);
                    return; 
                }

                // If successful (response.ok is true, typically status 200 from the Worker)
                // We proceed to update the *local* cart
                cart[productId] = (cart[productId] || 0) + 1;
                renderCart();
                showNotification("✅ Item added to cart!");

            } catch (error) {
                console.error('Error contacting the server:', error);
                showNotification("⚠️ Network error. Could not connect to the server.");
            }
        }
    });

    // The cart quantity control logic is still local for a better UX,
    // but in a production app, these should ideally also call a worker endpoint 
    // to update the server-side session/cart state.
    cartItemsContainer.addEventListener('click', (e) => {
        const target = e.target;
        if (target.classList.contains('quantity-control')) {
            const productId = target.dataset.id;
            const action = target.dataset.action;
            if (action === 'increment') {
                cart[productId] = (cart[productId] || 0) + 1;
            } else if (action === 'decrement' && cart[productId] > 0) {
                cart[productId]--;
                if (cart[productId] === 0) {
                    delete cart[productId];
                }
            }
            renderCart();
        }
    });

    checkoutButton.addEventListener('click', () => {
        if (Object.keys(cart).length === 0) {
            showNotification("Your cart is empty. Please add some items to checkout.");
            return;
        }
        const total = Object.entries(cart).reduce((sum, [id, quantity]) => {
            const product = products.find(p => p.id === id);
            return sum + (product.price * quantity);
        }, 0);
        showNotification(`Checkout successful! Your total is $${total.toFixed(2)}.`);
        cart = {};
        renderCart();
    });

    cartToggleButton.addEventListener('click', () => {
        cartSidebar.classList.toggle('open');
    });
    
    // Initial setup
    renderProducts();
    renderCart();
</script>
 
    

</body>
</html>
