---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
        <!-- Load Tailwind CSS for styling -->
        <script src="https://cdn.tailwindcss.com"></script>
        <script>
            // Tailwind Configuration and Custom Styles (from the demo)
            tailwind.config = {
                theme: {
                    extend: {
                        colors: {
                            'cf-blue': '#F38020',
                            'cf-orange': '#F38020',
                            'cf-dark': '#0f172a',
                            'success': '#10b981',
                            'warning': '#f59e0b',
                            'error': '#ef4444',
                            'info': '#3b82f6',
                        },
                        fontFamily: {
                            sans: ['Inter', 'sans-serif'],
                        },
                    }
                }
            }
        </script>
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
            body {
                background-color: #f1f5f9;
            }
            .container {
                max-width: 1024px;
            }
            .card {
                box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
                transition: all 0.3s ease;
            }
            .btn-cf {
                background-color: #F38020;
                color: white;
                padding: 10px 20px;
                border-radius: 8px;
                font-weight: 600;
                transition: background-color 0.2s;
            }
            .btn-cf:hover {
                background-color: #E27218;
            }
            .response-box {
                min-height: 120px;
            }
            .status-badge {
                font-weight: bold;
                padding: 4px 8px;
                border-radius: 9999px;
                display: inline-block;
            }
            textarea {
                resize: none;
            }
        </style>
	</head>
	<body class="font-sans min-h-screen p-4 md:p-8">
		<Header />
		<main class="container mx-auto">
            
            <header class="text-center mb-8">
                <h1 class="text-3xl font-bold text-cf-dark mb-2">Cloudflare Security Demonstration for macksportreport.com</h1>
                <p class="text-lg text-gray-600">Simulating WAF, Bot Management, and Selective API Shield enforcement.</p>
            </header>

            <!-- Environment Info Card -->
            <div id="env-info" class="card bg-white p-6 rounded-lg mb-8 border-t-4 border-cf-orange">
                <h2 class="text-xl font-semibold mb-3 text-cf-dark">Cloudflare Status Check</h2>
                <div class="space-y-2 text-sm text-gray-700">
                    <p><span class="font-medium">Connectivity:</span> <span class="text-success">✅ Proxied & Global CDN</span></p>
                    <p><span class="font-medium">SSL/TLS:</span> <span id="ssl-status" class="text-success">✅ Full (Strict) Encryption Active</span></p>
                    <p><span class="font-medium">Demo User ID:</span> <code id="user-id-display" class="bg-gray-100 p-1 rounded">Loading...</code> (Simulated Session)</p>
                </div>
            </div>
            
            <!-- API Shield Demo Section -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">

                <!-- API 1: Protected & Schema Validated (Modern API) -->
                <div class="card bg-white p-6 rounded-lg border-t-4 border-info">
                    <h2 class="text-xl font-semibold mb-3 flex items-center text-info">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.14-2.052-.418-3.016z"></path></svg>
                        API Shield: Schema Validation
                    </h2>
                    <p class="text-sm text-gray-500 mb-3">Endpoint: <code class="bg-gray-100 p-1 rounded">POST /api/v1/scores</code> (Requires JSON: `{"team": "...", "score": 100}`) </p>
                    
                    <label class="block text-sm font-medium text-gray-700 mb-1">Request Body (JSON)</label>
                    <textarea id="schema-payload" rows="4" class="w-full border border-gray-300 rounded-md p-2 focus:ring-info focus:border-info mb-3 bg-gray-50"></textarea>

                    <button id="run-schema-test" class="btn-cf w-full">Test Schema Validation</button>

                    <div id="schema-response-status" class="mt-4 response-box p-4 rounded-lg border border-gray-200">
                        <p class="text-gray-500">Status will appear here.</p>
                    </div>
                </div>

                <!-- API 2: Unvalidated (Legacy API) -->
                <div class="card bg-white p-6 rounded-lg border-t-4 border-warning">
                    <h2 class="text-xl font-semibold mb-3 flex items-center text-warning">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path></svg>
                        Legacy API: Unvalidated Path
                    </h2>
                    <p class="text-sm text-gray-500 mb-3">Endpoint: <code class="bg-gray-100 p-1 rounded">GET /api/v1/legacy/admin</code> (Not in Endpoint Management)</p>
                    
                    <p class="text-sm text-gray-600 mb-6">Since this path is not listed in Cloudflare's Endpoint Management, it **bypasses** the Schema Validation check, even if it carries unexpected data. This demonstrates selective protection.</p>
                    
                    <button id="run-legacy-test" class="btn-cf w-full">Test Legacy Access</button>

                    <div id="legacy-response-status" class="mt-4 response-box p-4 rounded-lg border border-gray-200">
                        <p class="text-gray-500">Status will appear here.</p>
                    </div>
                </div>

                <!-- Global WAF / Bot Demo Section -->
                <div class="lg:col-span-2 card bg-white p-6 rounded-lg border-t-4 border-error">
                    <h2 class="text-xl font-semibold mb-3 flex items-center text-error">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.674 0 3.313-.23 4.903-.684M12 21h0.01M10 17v-1.76M14 17v-1.76M14 12V6M10 12V6"></path></svg>
                        WAF & Bot Management Demo
                    </h2>
                    <p class="text-sm text-gray-500 mb-3">Endpoint: <code class="bg-gray-100 p-1 rounded">GET /api/v1/public</code> (Protected by global security rules)</p>
                    
                    <label class="block text-sm font-medium text-gray-700 mb-1">Query Parameter (e.g., `q=test` or `q=SELECT * FROM users--`) </label>
                    <input type="text" id="waf-query" placeholder="Enter a search query or a simulated SQL Injection payload" class="w-full border border-gray-300 rounded-md p-2 focus:ring-error focus:border-error mb-3 bg-gray-50" value="q=test">

                    <button id="run-waf-test" class="btn-cf w-full">Test WAF/Bot Security</button>

                    <div id="waf-response-status" class="mt-4 response-box p-4 rounded-lg border border-gray-200">
                        <p class="text-gray-500">Status will appear here.</p>
                    </div>
                </div>
            </div>

		</main>
		<Footer />

        <!-- Firebase and Simulation Logic (MUST be type="module" for Firebase imports) -->
        <script type="module">
            import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
            import { getAuth, signInAnonymously, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
            import { getFirestore } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
            
            // --- MANDATORY CANVAS ENVIRONMENT SETUP ---
            const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            const __initial_auth_token = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

            let app, db, auth;
            let userId = 'simulated_user_' + crypto.randomUUID().substring(0, 8);

            // Initialize Firebase and Auth
            const initFirebase = async () => {
                try {
                    if (Object.keys(firebaseConfig).length > 0) {
                        app = initializeApp(firebaseConfig);
                        db = getFirestore(app);
                        auth = getAuth(app);

                        if (__initial_auth_token) {
                            await signInWithCustomToken(auth, __initial_auth_token);
                        } else {
                            await signInAnonymously(auth);
                        }
                        if (auth.currentUser) {
                            userId = auth.currentUser.uid;
                        }
                    }
                } catch (error) {
                    console.error("Firebase initialization failed:", error);
                    // Continue with simulated userId if Firebase fails
                }
                document.getElementById('user-id-display').textContent = userId;
            };
            
            initFirebase();
            // --- END MANDATORY CANVAS ENVIRONMENT SETUP ---
            
            // --- SIMULATION LOGIC ---
            
            /**
             * Simulates an API call response based on predefined security rules.
             * @param {string} endpoint - The simulated API path.
             * @param {string} action - The type of security test being performed.
             * @param {any} payload - The request body or query parameter.
             * @returns {object} Simulated response object.
             */
            const simulateApiCall = (endpoint, action, payload = null) => {
                const result = {
                    status: 200,
                    statusText: "OK",
                    securityAction: "PASS",
                    responseBody: { message: "Data successfully received and processed at Origin." }
                };

                // 1. Schema Validation Check (POST /api/v1/scores)
                if (endpoint.includes("/v1/scores")) {
                    let parsedPayload;
                    try {
                        parsedPayload = JSON.parse(payload);
                    } catch (e) {
                        // Fail 1: Malformed JSON (Cloudflare fails before parsing)
                        result.status = 400;
                        result.statusText = "Bad Request";
                        result.securityAction = "BLOCK: Schema Violation (Malformed JSON)";
                        result.responseBody.message = "Cloudflare API Shield blocked request: Request body is not valid JSON.";
                        return result;
                    }
                    
                    const expectedSchema = { team: 'string', score: 'number' };
                    const missingKeys = Object.keys(expectedSchema).filter(key => !(key in parsedPayload));
                    const invalidTypes = Object.keys(expectedSchema).filter(key => 
                        key in parsedPayload && typeof parsedPayload[key] !== expectedSchema[key]
                    );

                    if (missingKeys.length > 0 || invalidTypes.length > 0) {
                        // Fail 2: Schema Mismatch (Missing or invalid data type)
                        result.status = 403;
                        result.statusText = "Forbidden";
                        result.securityAction = "BLOCK: Schema Violation (Invalid Data)";
                        
                        let details = [];
                        if (missingKeys.length > 0) details.push(`Missing required fields: ${missingKeys.join(', ')}`);
                        if (invalidTypes.length > 0) details.push(`Invalid data types for: ${invalidTypes.join(', ')}`);
                        
                        result.responseBody.message = `Cloudflare API Shield blocked request: Schema did not match expectation. ${details.join(' ')}`;
                        return result;
                    }
                    
                    result.responseBody.message = `Score for ${parsedPayload.team} successfully updated (Schema Validated).`;
                }

                // 2. Legacy API (GET /api/v1/legacy/admin) - Always passes, demonstrating lack of validation.
                else if (endpoint.includes("/v1/legacy/admin")) {
                    // This simulates the behavior of an endpoint NOT managed by API Shield.
                    // It successfully receives the request, regardless of content/method.
                    result.responseBody.message = `Legacy Admin endpoint accessed. NO Cloudflare Schema Validation was applied. (200 OK)`;
                }

                // 3. WAF/Bot Demo (GET /api/v1/public)
                else if (endpoint.includes("/v1/public")) {
                    // Check for common WAF attack signatures (simulated)
                    const attackSignatures = [
                        'SELECT', 'UNION', 'OR 1=1', 'DROP TABLE',
                        '<script>', 'onerror=', 'onmouse',
                        'exec', 'cmd.exe', 'powershell'
                    ];
                    
                    const isAttack = attackSignatures.some(sig => payload.toUpperCase().includes(sig.toUpperCase()));

                    if (isAttack) {
                        // Fail 3: WAF Attack Signature Block
                        result.status = 403;
                        result.statusText = "Forbidden";
                        result.securityAction = "BLOCK: WAF - SQLi/XSS Signature Match";
                        result.responseBody.message = `Cloudflare WAF blocked request: Detected known attack signature in query parameter.`;
                        
                        // Simulate a Managed Challenge if the user is a known bot/attacker
                        if (userId.includes('simulated_user_')) {
                            result.securityAction = "CHALLENGE: Bot Score Low";
                            result.responseBody.message = `Cloudflare Bot Management issued a Managed Challenge.`;
                        }
                        return result;
                    }
                    
                    result.responseBody.message = `Public API accessed successfully. Query: "${payload}". (WAF/Bot PASS)`;
                }

                return result;
            };

            /**
             * Renders the result of the API simulation into the UI.
             */
            const renderResult = (elementId, endpoint, method, result) => {
                const targetElement = document.getElementById(elementId);
                let statusColor, statusLabel, securityClass;

                switch (result.securityAction.split(':')[0]) {
                    case 'BLOCK':
                    case 'CHALLENGE':
                        statusColor = 'bg-error text-white';
                        statusLabel = 'BLOCKED / CHALLENGED';
                        securityClass = 'text-error';
                        break;
                    case 'PASS':
                        statusColor = 'bg-success text-white';
                        statusLabel = 'PASSED';
                        securityClass = 'text-success';
                        break;
                    default:
                        statusColor = 'bg-gray-500 text-white';
                        statusLabel = 'UNKNOWN';
                        securityClass = 'text-gray-500';
                }

                targetElement.innerHTML = `
                    <div class="flex justify-between items-center mb-2 pb-2 border-b border-gray-100">
                        <p class="text-sm font-semibold text-cf-dark">Simulated Response</p>
                        <span class="status-badge ${statusColor}">${statusLabel}</span>
                    </div>
                    <div class="space-y-1 text-sm">
                        <p><span class="font-medium">Method/Endpoint:</span> <code class="bg-gray-100 p-1 rounded">${method} ${endpoint}</code></p>
                        <p><span class="font-medium">HTTP Status:</span> <span class="${securityClass}">${result.status} ${result.statusText}</span></p>
                        <p><span class="font-medium">Cloudflare Action:</span> <span class="${securityClass}">${result.securityAction}</span></p>
                        <p><span class="font-medium">Response Message:</span> ${result.responseBody.message}</p>
                    </div>
                `;
            };

            // --- Event Listeners ---

            document.getElementById('run-schema-test').addEventListener('click', () => {
                const endpoint = '/api/v1/scores';
                const payload = document.getElementById('schema-payload').value;
                const result = simulateApiCall(endpoint, 'SCHEMA_VALIDATION', payload);
                renderResult('schema-response-status', endpoint, 'POST', result);
            });

            document.getElementById('run-legacy-test').addEventListener('click', () => {
                const endpoint = '/api/v1/legacy/admin';
                // Payload is irrelevant for this GET endpoint
                const result = simulateApiCall(endpoint, 'LEGACY_BYPASS');
                renderResult('legacy-response-status', endpoint, 'GET', result);
            });

            document.getElementById('run-waf-test').addEventListener('click', () => {
                const endpoint = '/api/v1/public';
                const query = document.getElementById('waf-query').value;
                const result = simulateApiCall(endpoint, 'WAF_BOT', query);
                renderResult('waf-response-status', endpoint, 'GET', result);
            });
            
            // Default payloads for easy testing
            document.addEventListener('DOMContentLoaded', () => {
                document.getElementById('schema-payload').value = JSON.stringify({
                    "team": "Macksport Lions",
                    "score": 42
                }, null, 2);
            });

        </script>
	</body>
</html>
